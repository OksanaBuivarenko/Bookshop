package com.example.MyBookShopApp.data;

import com.example.MyBookShopApp.data.*;
import com.example.MyBookShopApp.data.book.*;
import com.fasterxml.jackson.annotation.JsonIgnore;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;

import javax.persistence.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Getter
@Setter
@Entity
@Table(name = "users")
@ApiModel(description = "entity representing a user")
public class BookstoreUser {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @ApiModelProperty("id generated by db automaticaly")
    private Integer id;

    @Column(columnDefinition = "VARCHAR(255) NOT NULL")
    @ApiModelProperty("user hash, used for external identification of the user in order to hide his ID")
    private String hash;

    @Column(name = "reg_time", columnDefinition = "DATE NOT NULL")
    @ApiModelProperty("date and time of user registration")
    private LocalDateTime regTime;

    @Column(columnDefinition = "INT DEFAULT 0")
    @ApiModelProperty("personal account balance, default 0")
    private int balance;

    @Column(columnDefinition = "VARCHAR(255) NOT NULL")
    @ApiModelProperty("user name")
    private String name;

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL)
    @LazyCollection(LazyCollectionOption.FALSE)
    @JsonIgnore
    private List<UserContact> contacts;

    @OneToMany(mappedBy = "user")
    @JsonIgnore
    private List<Message> messages;

    private String password;

    @Column(columnDefinition = "INT DEFAULT 0")
    @ApiModelProperty("user is blocked - 1 , user isn't blocked - 0")
    private int isBlocked;

    @ApiModelProperty("user's role (user or admin)")
    @Enumerated(EnumType.STRING)
    private EnumUserRoles role;

    @ManyToMany(cascade = CascadeType.ALL)
    @JsonIgnore
    @JoinTable(name = "book2user",
            joinColumns = @JoinColumn(name = "user_id"),
            inverseJoinColumns = @JoinColumn(name = "book_id"))
    private List<Book> books;

    @OneToMany(fetch = FetchType.EAGER, mappedBy = "user")
    @JsonIgnore
    public List<Book2User> book2Users = new ArrayList<>();

    @OneToMany(mappedBy = "user")
    private List<BookReview> bookReviewList = new ArrayList<>();

    @OneToMany(cascade = CascadeType.ALL)
    private List<BookReviewLike> bookReviewLikes = new ArrayList<>();

    @OneToMany(mappedBy = "user")
    @JsonIgnore
    private List<Transactions> balanceTransaction = new ArrayList<>();

    @OneToMany(mappedBy = "user")
    @JsonIgnore
    private List<File_download> downloadFiles = new ArrayList<>();

    @OneToMany(mappedBy = "author")//,cascade = CascadeType.ALL
    @JsonIgnore
    private List<AuthorFile> authorFileList = new ArrayList<>();

    transient String passwordReply;
    transient String newName;
    transient String newPhone;
    transient String newEmail;


}