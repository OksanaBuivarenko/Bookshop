package com.example.MyBookShopApp.data;

import com.example.MyBookShopApp.data.book.Book;
import com.fasterxml.jackson.annotation.JsonIgnore;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.OnDelete;
import org.hibernate.annotations.OnDeleteAction;

import javax.persistence.*;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;

@Getter
@Setter
@Entity
@Table(name = "genre")
@ApiModel(description = "entity representing a genre")

public class Genre implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @ApiModelProperty("id generated by db automaticaly")
    private int id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "parent_id", foreignKey = @ForeignKey(name = "FK_PARENT_ID"))
    private Genre parentId;

    @Column(columnDefinition = "VARCHAR(255) NOT NULL")
    private String slug;

    @Column(name="genre_name", columnDefinition = "VARCHAR(255) NOT NULL")
    private String genreName;

    @ManyToMany(cascade = CascadeType.ALL)
    @JsonIgnore
    @JoinTable(name = "book2genre",
            joinColumns = @JoinColumn(name = "genre_id"),
            inverseJoinColumns = @JoinColumn(name = "book_id"))
    private List<Book> books;

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JoinColumn(name = "parent_id")
    @OnDelete(action = OnDeleteAction.CASCADE)
    private List<Genre> children = new ArrayList<>();

    public int booksCount (){
        int booksCount = 0;
        if (children.isEmpty()) {
            return getBooks().size();
        }
        for (Genre child:children){
            booksCount+=child.getBooks().size();
            if (!child.getChildren().isEmpty()){
                for (Genre child1 : child.getChildren()) {
                    booksCount += child1.getBooks().size();
                }
            }
        }
        return booksCount;
    }

    public List<Genre> childList(){
        Comparator<Genre> genreComparator = java.util.Comparator.comparing(genre -> genre.booksCount());
        genreComparator = genreComparator.reversed();
        children.sort(genreComparator);
        return children;
    }
}
