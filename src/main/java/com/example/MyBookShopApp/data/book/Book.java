package com.example.MyBookShopApp.data.book;

import com.example.MyBookShopApp.data.*;
import com.example.MyBookShopApp.data.BookstoreUser;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
@Getter
@Setter
@Entity
@Table(name = "books")
@ApiModel(description = "entity representing a book")
public class Book {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @ApiModelProperty("id generated by db automaticaly")
    private Integer id;

    @Column(name = "pub_date", columnDefinition = "DATE NOT NULL")
    @ApiModelProperty("date of book publication")
    private Date pubDate;

    @Column(name = "is_bestseller", columnDefinition = "INT NOT NULL")
    @ApiModelProperty("if isBestseller = 1 so the book is considered to be bestseller and  if 0 the book is not a " +
            "bestseller")
    private Integer isBestseller;

    @Column(columnDefinition = "VARCHAR(255) NOT NULL")
    @ApiModelProperty("mnemonical identity sequence of characters")
    private String slug;

    @Column(columnDefinition = "VARCHAR(255) NOT NULL")
    @ApiModelProperty("book title")
    private String title;

    @ApiModelProperty("image url")
    private String image;

    @Column(columnDefinition = "TEXT")
    @ApiModelProperty("book description text")
    private String description;

    @Column(name = "price", columnDefinition = "INT NOT NULL")
    @JsonProperty("price")
    @ApiModelProperty("book price without discount")
    private Integer priceOld;

    @Column(name = "discount", columnDefinition = "INT NOT NULL DEFAULT 0")
    @JsonProperty("discount")
    @ApiModelProperty("discount value for book")
    private Double price;

    @OneToMany(mappedBy = "book") //cascade = CascadeType.ALL
    @JsonIgnore
    private List<BookReview> bookReviewList = new ArrayList<>();

    @OneToMany(mappedBy = "book")//,cascade = CascadeType.ALL
    @JsonIgnore
    private List<BookFile> bookFileList = new ArrayList<>();

    @OneToMany(mappedBy = "user")//,cascade = CascadeType.ALL
    @JsonIgnore
    private List<File_download> downloadFiles;

    @OneToOne(mappedBy = "book")//, cascade = CascadeType.ALL
    @JsonIgnore
    private BookRating bookRating;

    @Column(name = "rating_popularity")//, columnDefinition = "default 0"
    private int ratingPopularity;

    @JsonProperty
    public Integer discountPrice(){
        Integer discountedPriceInt = priceOld - Math.toIntExact(Math.round((price * priceOld)/100));
        return discountedPriceInt;
    }
    @ManyToMany
    @JoinTable(name = "book2user",
            joinColumns = @JoinColumn(name = "book_id"),
            inverseJoinColumns = @JoinColumn(name = "user_id"))
    @JsonIgnore
    private List<BookstoreUser> users;

    @OneToMany(mappedBy = "book")
    @JsonIgnore
    public List<Book2User> book2Users;

    @OneToMany(mappedBy = "book")
    @JsonIgnore
    public List<Book2Author> book2Authors;

    @ManyToMany
    @JoinTable(name = "book2author",
            joinColumns = @JoinColumn(name = "book_id"),
            inverseJoinColumns = @JoinColumn(name = "author_id"))
    @JsonIgnore
    private List<Author> authors;

    @ManyToMany
    @JsonIgnore
    @JoinTable(name = "book2tag",
            joinColumns = @JoinColumn(name = "book_id"),
            inverseJoinColumns = @JoinColumn(name = "tag_id"))
    private List<Tag> tags;

    @ManyToMany
    @JsonIgnore
    @JoinTable(name = "book2genre",
            joinColumns = @JoinColumn(name = "book_id"),
            inverseJoinColumns = @JoinColumn(name = "genre_id"))
    private List<Genre> genres;

    @Override
    public String toString() {
        return "Book{" +
                "id=" + id +
                ", title='" + title + '\'' +
                ", pubDate='" + pubDate + '\'' +
                ", priceOld='" + priceOld + '\'' +
                ", price='" + price + '\'' +
                '}';
    }

    public String authorsTostring() {
        String authorsString = "";
        for (Author author: authors){
            if (authorsString.equals("")){
                authorsString += author.getName();
            }
            else {
                authorsString += ", " + author.getName();
            }
        }
        return authorsString;
    }
    @Transient
    private String AuthorsDto;

    public String genresTostring() {
        String genresString = "";
        for (Genre genre: genres){
            if (genresString.equals("")){
                genresString += genre.getGenreName();
            }
            else {
                genresString += ", " + genre.getGenreName();
            }
        }
        return genresString;
    }
    @Transient
    private String GenresDto;

    public String tagsTostring() {
        String tagsString = "";
        for (Tag tag: tags){
            if (tagsString.equals("")){
                tagsString += tag.getTagName();
            }
            else {
                tagsString += ", " + tag.getTagName();
            }
        }
        return tagsString;
    }

    @Transient
    private String TagsDto;
}
